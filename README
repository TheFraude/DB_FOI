To make your database design easier to read and structured, I'll add clear titles and format your SQL code. Here's a cleaned-up version of the database model, including the diagrams you described:

# **Database Model for Online Store**

## **Description**
This database design supports a generic online store, where users can search and buy products. Products are categorized by type and linked to suppliers and companies that sell them. The structure ensures relationships between customers, purchases, suppliers, and products.

## **Tables and SQL Code**

### **1. Company**

Represents companies that produce or distribute products.

```sql
CREATE TABLE Company(
	ID INTEGER PRIMARY KEY,
	NAME VARCHAR(25),
	HQ VARCHAR(100),
	URL VARCHAR(300)
);
```

### **2. Customer**

Stores customer data, ensuring unique email addresses to identify users.

```sql
CREATE TABLE Customer (
	EMAIL VARCHAR(40) PRIMARY KEY,
	NAME VARCHAR(30),
	PHONE VARCHAR(14),
	ADDRESS VARCHAR(200)
);
```

### **3. Category**

Defines broad product categories, such as "Clothing," "Electronics," etc.

```sql
CREATE TABLE Category(
	CATEGORYID INTEGER PRIMARY KEY,
	NAME VARCHAR(20),
	DESCRIPTION TEXT
);
```

### **4. Product**

Stores individual product details, including price, stock, and category. Each product is linked to its company, type, and category.

```sql
CREATE TABLE Product(
	PRODUCTID INTEGER PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,  -- Mandatory field
	PRICE FLOAT NOT NULL,        -- Mandatory field, no free products
	INSTOCK INTEGER NOT NULL DEFAULT 0,  -- Default stock set to 0
	CATEGORYID INTEGER,
	TYPEID INTEGER,
	COMPANYID INTEGER,
	FOREIGN KEY (CATEGORYID) REFERENCES Category(CATEGORYID),
	FOREIGN KEY (TYPEID) REFERENCES TypeOfProduct(TYPEID),
	FOREIGN KEY (COMPANYID) REFERENCES Company(ID)
);
```

### **5. Purchase**

Tracks customer purchases, linking customers and products. Also records the purchase date and quantity.

```sql
CREATE TABLE Purchase(
	PURCHASEID INTEGER PRIMARY KEY,
	EMAIL VARCHAR(40),
	PRODUCTID INTEGER,
	PURCHASEDATE DATE NOT NULL,  -- Ensures date is filled in
	HOWMANY INTEGER NOT NULL,    -- Specifies quantity purchased
	FOREIGN KEY (EMAIL) REFERENCES Customer(EMAIL),
	FOREIGN KEY (PRODUCTID) REFERENCES Product(PRODUCTID)
);
```

### **6. Supplier**

Tracks suppliers providing products. Suppliers are linked to products they supply.

```sql
CREATE TABLE Supplier(
	SUPPLIERID INTEGER PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,  -- Supplier name must be provided
	CONTACTINFO VARCHAR(100),
	PRODUCTID INTEGER,  -- Links each supplier to specific products
	FOREIGN KEY (PRODUCTID) REFERENCES Product(PRODUCTID)
);
```

### **7. TypeOfProduct**

Defines product types within a category. For example, "Smartphones" in the "Electronics" category.

```sql
CREATE TABLE TypeOfProduct(
	TYPEID INTEGER PRIMARY KEY,
	TNAME VARCHAR(20),
	CATEGORYID INTEGER,
	FOREIGN KEY (CATEGORYID) REFERENCES Category(CATEGORYID)
);
```

---

### **General Structure Overview:**

1. **Company** produces/distributes **Products**.
2. **Customers** make **Purchases**.
3. **Products** are categorized by **Category** and **TypeOfProduct**.
4. **Suppliers** provide **Products**.

The design ensures all relationships are clearly defined and interconnected, enhancing database efficiency and integrity.

---

Let me know if you'd like further changes or additions!